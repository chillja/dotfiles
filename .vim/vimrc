" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
  if &compatible
	set nocompatible               " Be iMproved
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" Bundles
" --------------------------------------------------------------------------

" Utilities
NeoBundle 'Shougo/neosnippet.vim'                        " Snippets support
NeoBundle 'Shougo/neosnippet-snippets'                   " Snippets
NeoBundle 'Shougo/unite.vim'                             " Fuzzy file finder
" NeoBundle 'Shougo/neocomplete.vim'                       " AutoComplete
NeoBundle 'Shougo/deoplete.nvim'			 " Neovim Autocomplete
NeoBundle 'Shougo/neomru.vim'                            " MRU sources
NeoBundle 'Shougo/unite-outline'                         " Tags Unite source
NeoBundle 'tpope/vim-sensible'                           " Default configs
NeoBundle 'tpope/vim-sleuth'                             " Tab identation settings
NeoBundle 'tpope/vim-vinegar'                            " Netrw helper
NeoBundle 'tpope/vim-eunuch'                             " Unix helpers
NeoBundle 'tpope/vim-commentary'                         " Toggle comments
NeoBundle 'tpope/vim-surround'                           " Sorroundings
NeoBundle 'tpope/vim-obsession'                          " Session manager 
NeoBundle 'tpope/vim-repeat'                             " More . command
NeoBundle 'kana/vim-textobj-user'			 " Custom text object
NeoBundle 'kana/vim-textobj-line'			 " Line text object
NeoBundle 'scrooloose/syntastic',                        " Check syntax
NeoBundle 'Raimondi/delimitMate',                        " Auto close quotes parentesis etc
" NeoBundle 'rking/ag.vim'                                 " Silver Searcher for vim
NeoBundle 'mhinz/vim-grepper'				 " Multiple grep support
NeoBundle 'sjl/gundo.vim',                               " Undo tree
NeoBundle 'vim-scripts/loremipsum'                       " Lorem ipsum text
NeoBundle 'tsukkee/unite-tag'                            " Unite Taf source
NeoBundle 'arlefreak/vim-fastunite'                      " Settings for Unite
NeoBundle 'Chiel92/vim-autoformat'			 " AutoFormat code
NeoBundle 'mhinz/vim-startify'				 " Start Screen

" Git
NeoBundle 'tpope/vim-fugitive'                           " Git wrapper
NeoBundle 'airblade/vim-gitgutter'                       " Git gutter simbols

" Web
NeoBundle 'mattn/emmet-vim',                             " Emmet

" Languages and Frameworks
NeoBundle 'elzr/vim-json',                               " JSON plugin
NeoBundle 'pangloss/vim-javascript'                      " Sintax and ident plugins
NeoBundle 'mxw/vim-jsx'		 " JSX support
NeoBundle 'maksimr/vim-jsbeautify'			 " JSBeutifier
NeoBundle 'einars/js-beautify' 				 " JSBeutifier
NeoBundle 'vim-scripts/django.vim'                       " Django plugin
NeoBundle 'klen/python-mode/'				 " Python Mode
NeoBundle 'jmcantrell/vim-virtualenv'                    " Python virtualenv
NeoBundle 'wavded/vim-stylus'                            " Stylus plugin
NeoBundle 'othree/html5.vim'                             " Html5 Plugin
NeoBundle 'tpope/vim-markdown'                           " Markdown
NeoBundle 'davidhalter/jedi-vim'                         " Python autocomplete
NeoBundle 'OmniSharp/omnisharp-vim'                      " C# AutoComplete# AutoComplete# AutoComplete
" NeoBundle 'OrangeT/vim-csharp'                           " Better C# syntax highlight
NeoBundle 'rust-lang/rust.vim' 				 " Rust Language Support
NeoBundle 'tpope/vim-dispatch'                           " Asynchronous build and test dispatcher

" Visual
NeoBundle 'godlygeek/tabular'                            " Align code
NeoBundle 'nathanaelkane/vim-indent-guides',             " Ident visual guide
NeoBundle 'gregsexton/MatchTag',                         " Highlite Matching tag
NeoBundle 'bling/vim-airline'                            " Cool airline
NeoBundle 'edkolev/tmuxline.vim'                         " Tmux airline
NeoBundle 'bling/vim-bufferline'                         " Buffer airline

" ColorSchemes
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'morhetz/gruvbox'
NeoBundle 'w0ng/vim-hybrid'

NeoBundle 'Shougo/vimproc', {
	  \ 'build' : {
	  \     'windows' : 'make -f make_mingw32.mak',
	  \     'cygwin' : 'make -f make_cygwin.mak',
	  \     'mac' : 'make -f make_mac.mak',
	  \     'unix' : 'make -f make_unix.mak',
	  \    },
	  \ }
call neobundle#end()

NeoBundleCheck

" General
" ---------------------------------------------------------------------

" Let
let mapleader="\<Space>"
let loaded_matchparen = 1
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
" let g:python_host_prog='/usr/local/bin/python'

" Set
set relativenumber
set number
set hlsearch
set cursorline
set clipboard=unnamed
set ttyfast

if has("gui_running")
  set guifont=Sauce\ Code\ Powerline\:h11
endif

" Disable arrows
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Splits
set fillchars=vert:â”‚,fold:-
set splitbelow
set splitright
highlight VertSplit cterm=none ctermbg=none ctermfg=247

" Undo
" ----------------------------------------------------------------------
" ----------------------------------------------------------------------
if exists("&undodir")
  set undofile          "Persistent undo! Pure money.
  let &undodir=&directory
  set undolevels=500
  set undoreload=500
endif

" Identation
" ----------------------------------------------------------------------
filetype plugin indent on
set tabstop=4
set shiftwidth=4
set expandtab
nmap <leader>i mzgg=G`z<CR>

" Colors
" ----------------------------------------------------------------------
" let g:hybrid_use_Xresources=1
set background=dark
colorscheme hybrid

" function s:SetCursorLine()
"   set cursorline
"   hi cursorline cterm=none,underline ctermbg=none ctermfg=none
" endfunction
" autocmd VimEnter * call s:SetCursorLine()

" Netrw
" ----------------------------------------------------------------------
let g:netrw_liststyle = 3
let g:netrw_preview   = 1
let g:netrw_winsize   = 20

" Buffer
" ----------------------------------------------------------------------
set hidden
nmap <leader>T  : enew<cr>
nmap <leader>l  : bnext<CR>
nmap <leader>h  : bprevious<CR>
nmap <leader>bq : bp <BAR> bd #<CR>
nmap <leader>bl : ls<CR>
let g:netrw_preview = 1

" Tabs
" ----------------------------------------------------------------------
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

" Gundo
" ----------------------------------------------------------------------
nnoremap <F5> :GundoToggle<CR>

" Tabular
" ----------------------------------------------------------------------
source $HOME/.vim/tabular.vim

" Unite
" ---------------------------------------------------------------------
source $HOME/.vim/unite.vim

" JSBeutifier
" _____________________________________________________________________
source $HOME/.vim/jsbeautify.vim

" Syntastic
" ----------------------------------------------------------------------
source $HOME/.vim/syntastic.vim

" NeoMake
" ----------------------------------------------------------------------
" source $HOME/.vim/neomake.vim

" Emmet
" ----------------------------------------------------------------------
source $HOME/.vim/emmet.vim

" Xclip
" ----------------------------------------------------------------------
source $HOME/.vim/xclip.vim

" Vim-airline
" ----------------------------------------------------------------------
source $HOME/.vim/airline.vim

" NeoComplete
" ----------------------------------------------------------------------
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#enable_smart_case = 1

if exists(':NeoComplete')
  source $HOME/.vim/neocomplete.vim
endif

" NeoSnippet 
" ----------------------------------------------------------------------
source $HOME/.vim/neosnippet.vim

" Rust
" ------------------------------------------------------------------------
" let g:rustfmt_autosave = 1
nmap <Leader>f :Autoformat<CR>
let g:formatdef_rustfmt = '"rustfmt"'
let g:formatters_rust = ['rustfmt']
